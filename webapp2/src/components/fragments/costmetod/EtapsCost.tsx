import React, { FC, useState } from "react";
import { Tabs, cnTabsTab } from '@consta/uikit/Tabs';
import { Layout } from "@consta/uikit/LayoutCanary";
import { Text } from "@consta/uikit/Text";
import EtapRowCost from "./EtapRowCost";
import EtapFooterCost from "./EtapFooterCost";
import KomandBar from "./../KomandBar";
import { IconInfo } from '@consta/uikit/IconInfo';
import { useAppSelector } from "../../../hooks/redux";
import { IStag } from "../../../models/ISamp"
import { useFetchSampQuery } from "../../../services/SampService";
import PopoverCustom from "../../util/PopoverCustom";


const EtapsCost = (props: { isTravelShow: boolean }) => {

    const { link_id } = useAppSelector(state => state.authReducer)
    //const params = useLocation().search;
    //const this_samp_id = new URLSearchParams(params).get("samp") || kp_sample_guid || ''
    const { data: samp } = useFetchSampQuery(link_id)

    const [tab, setTab] = useState<IStag>({
        "kp_stage_guid": "",
        "kp_sample_guid": "",
        "opr_usl_stage_id": "",
        "opr_usl_stage": "",
        "opr_usl_stage_num": 1,
        isNoNds: false,
        stagSumm: "",
        stagSumm_nds: "",
        nds_comm: "",
        isValid: true,
        "units": [],


        //cost
        "stage_laboriousness": "",
        "stage_price_ei": "",
        "stage_price": "",
        "stage_price_nds": "",
    });

    //popover
    type Position = any;
    const [position, setPosition] = useState<Position>(undefined)
    const [popoverText, setPopoverText] = useState<string>("")

    const handleMouseMove = (event: React.MouseEvent, type: number) => {
        setPosition({ x: event.clientX, y: event.clientY })
        let msg = ""
        if (type == 0) {
            msg = "–í–≤–µ–¥–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è \n —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) \n –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É ‚Äú–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ‚Äù. \n –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ \n(–æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π), –Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ–µ \n –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É."
        }
        if (type == 1) {
            msg = "–£–∫–∞–∑–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"
        }
        if (type == 2) {
            msg = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –æ—Ç–≤–µ–¥–µ–Ω–Ω—ã—Ö\n –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ / —É—Å–ª—É–≥–∏"
        }
        if (type == 3) {
            msg = "–°—Ç–æ–∏–º–æ—Å—Ç—å –ï–ò –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞\n –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞\n —Å—Ç–∞–≤–æ–∫"
        }

        setPopoverText(msg)
    };
    //

    return (
        <>
            {samp ? (
                <>
                    <PopoverCustom position={position} text={popoverText} />
                    {/*  */}
                    {props.isTravelShow ? (
                        <KomandBar />
                    ) : null}
                    <Layout>
                        <Tabs
                            className="Tabs"
                            linePosition="right"
                            value={tab}
                            onChange={({ value }) => setTab(value)}
                            items={samp.stags}
                            getLabel={(item) => "—ç—Ç–∞–ø " + item.opr_usl_stage_num}
                            renderItem={({ label, checked, onChange, item }) => (
                                <button type="button" onClick={onChange}
                                    className={`${cnTabsTab({ checked })} ${item.isValid ? 'Valid' : 'unValid'}`}>
                                    <span role="img" aria-label="img" className="tabNum">
                                        {/* {checked ? 'ü§ò' : '‚úã'} */}
                                        {item.opr_usl_stage_num}
                                    </span>
                                    <span className="tabLabel">{label.split(' ')[0]}</span>
                                </button>
                            )}
                        />
                        <Layout flex={1} className="TabsPageContainer" direction="column">
                            <Layout flex={1} direction="row" className="mb1 aib mt05">
                                <Text as="div" className="subTitleOpr_usl_stageLabel mr2">
                                    –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ / —É—Å–ª—É–≥–∏ (—Ä–∞–±–æ—Ç—ã):
                                </Text>
                                <Text as="div" className="labeltext subTitleOpr_usl_stage">
                                    {samp.stags[tab.opr_usl_stage_num - 1].opr_usl_stage}
                                </Text>
                            </Layout>
                            <Layout>
                                <Text as="div" className="Title Title2 mb1">
                                    –°–æ—Å—Ç–∞–≤ —ç—Ç–∞–ø–∞ / —É—Å–ª—É–≥–∏ (—Ä–∞–±–æ—Ç—ã)
                                </Text>
                            </Layout>
                            <Layout className="tableHeader">
                                <Layout flex={2} className="tar">
                                    <Text className="label">
                                        –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
                                    </Text>
                                    <div onMouseMove={(e) => handleMouseMove(e, 0)} onMouseLeave={() => setPosition(undefined)}>
                                        <IconInfo size="s" view="ghost" />
                                    </div>
                                </Layout>
                                <Layout flex={1}>
                                    <Text className="label" align="center">–ï–¥–∏–Ω–∏—Ü–∞<br />–∏–∑–º–µ—Ä–µ–Ω–∏—è (–ï–ò)</Text>
                                </Layout>
                                <Layout flex={1}>
                                    <Text className="label" align="center">–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å<br />—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</Text>
                                    <div onMouseMove={(e) => handleMouseMove(e, 1)} onMouseLeave={() => setPosition(undefined)}>
                                        <IconInfo size="s" view="ghost" />
                                    </div>
                                </Layout>
                                <Layout flex={1}>
                                    <Text className="label" align="center">–¢—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å, –ï–ò </Text>
                                    <span className="FieldLabel-Star">*</span>
                                </Layout>
                                <Layout flex={1} className="mr1">
                                    <Text className="label" align="center">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ<br />—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –ï–ò </Text>
                                    <div onMouseMove={(e) => handleMouseMove(e, 2)} onMouseLeave={() => setPosition(undefined)}>
                                        <IconInfo size="s" view="ghost" />
                                    </div>
                                </Layout>
                                <Layout flex={1} className="mr1">
                                    <Text className="label" align="center">–°—Ç–æ–∏–º–æ—Å—Ç—å –ï–ò<br />–±–µ–∑ –ù–î–°</Text>
                                    <div onMouseMove={(e) => handleMouseMove(e, 3)} onMouseLeave={() => setPosition(undefined)}>
                                        <IconInfo size="s" view="ghost" />
                                    </div>
                                </Layout>
                                <Layout flex={1} className="mr1">
                                    <Text className="label" align="center">–°—É–º–º–∞ –±–µ–∑ –ù–î–°</Text>
                                </Layout>
                                <Layout flex={1} className="mr1">
                                    <Text className="label" align="center">–°—Ç–∞–≤–∫–∞ –ù–î–°</Text>
                                </Layout>
                                <Layout flex={1}>
                                    <Text className="label" align="center">–°—É–º–º–∞ —Å –ù–î–°</Text>
                                </Layout>
                            </Layout>
                            <EtapRowCost etapId={tab.opr_usl_stage_num} />
                            <EtapFooterCost etapId={tab.opr_usl_stage_num} />
                        </Layout>
                    </Layout>
                </>
            ) : null}
        </>
    );
};

export default EtapsCost;
