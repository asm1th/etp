import React, { FC, useState } from "react";
import { Tabs, cnTabsTab } from '@consta/uikit/Tabs';
import { Layout } from "@consta/uikit/LayoutCanary";
import { Text } from "@consta/uikit/Text";
import EtapRow from "./EtapRow";
import EtapFooter from "./EtapFooter";
import KomandBar from "./KomandBar";
import { IconInfo } from '@consta/uikit/IconInfo';
import { Popover } from '@consta/uikit/Popover';
import { useAppSelector } from "../../hooks/redux";
import { IStag } from "../../models/ISamp"
import { useFetchSampQuery } from "../../services/SampService";
import { useLocation } from "react-router-dom";

const Etaps: FC = () => {
    const params = useLocation().search;
    const {kp_sample_guid} = useAppSelector(state => state.authReducer)
    const this_kp_sample_guid = new URLSearchParams(params).get("kp_sample_guid") || kp_sample_guid || ''
    const { data: samp } = useFetchSampQuery(this_kp_sample_guid);

    const [tab, setTab] = useState<IStag>({
        "kp_stage_guid": "",
        "kp_sample_guid": "",
        "opr_usl_stage_id": "",
        "opr_usl_stage": "",
        "opr_usl_stage_num": 1,
        isNoNds: false,
        stagSumm: "",
        stagSumm_nds: "",
        "units": []
    });

    //popover
    type Position = any;
    const [position, setPosition] = useState<Position>(undefined);

    const handleMouseMove = (event: React.MouseEvent) => {
        setPosition({ x: event.clientX, y: event.clientY });
    };
    //

    return (
        <>
            {samp ? (
                <>
                    <Popover
                        direction="rightCenter"
                        spareDirection="downStartLeft"
                        offset="xl"
                        arrowOffset={0}
                        //onClickOutside={action('onClickOutside')}
                        isInteractive={false}
                        position={position}
                        className="tipPopover">

                        {(direction) => (
                            <div>
                                <Text size="xs">
                                    –í–≤–µ–¥–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è<br /> —Ä–∞—Å—Ü–µ–Ω–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)<br />–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É ‚Äú–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ‚Äù. <br />–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏<br />(–æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π), –Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ–µ<br /> –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.
                                </Text>
                            </div>
                        )}
                    </Popover>
                    <Layout className="TabsPage" direction="column">
                        <KomandBar />
                        <Layout>
                            <Tabs
                                className="Tabs"
                                linePosition="right"
                                value={tab}
                                onChange={({ value }) => setTab(value)}
                                items={samp.stags}
                                getLabel={(item) => "—ç—Ç–∞–ø "+item.opr_usl_stage_num}
                                renderItem={({ label, checked, onChange, item}) => (
                                    <button type="button" onClick={onChange} className={cnTabsTab({ checked })}>
                                      <span role="img" aria-label="img" className="tabNum">
                                        {/* {checked ? 'ü§ò' : '‚úã'} */}
                                        {item.opr_usl_stage_num}
                                      </span>
                                      <span className="tabLabel">{label.split(' ')[0]}</span>
                                    </button>
                                  )}
                            />
                            <Layout flex={1} className="TabsPageContainer" direction="column">
                                <Layout flex={1} direction="row" className="mb1 aib mt05">
                                    <Text as="div" className="subTitleOpr_usl_stageLabel mr2">
                                        –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ / —É—Å–ª—É–≥–∏ (—Ä–∞–±–æ—Ç—ã):
                                    </Text>
                                    <Text as="div" className="labeltext subTitleOpr_usl_stage">
                                        {samp.stags[tab.opr_usl_stage_num - 1].opr_usl_stage}
                                    </Text>
                                </Layout>
                                <Layout>
                                    <Text as="div" className="Title Title2 mb1">
                                        –°–æ—Å—Ç–∞–≤ —ç—Ç–∞–ø–∞ / —É—Å–ª—É–≥–∏ (—Ä–∞–±–æ—Ç—ã)
                                    </Text>
                                </Layout>
                                <Layout className="tableHeader">
                                    <Layout flex={3} className="tar">
                                        <Text className="label">
                                            –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
                                        </Text>
                                        <div onMouseMove={handleMouseMove} onMouseLeave={() => setPosition(undefined)}>
                                            <IconInfo size="s" view="ghost" />
                                        </div>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–ï–ò)</Text>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ï–ò</Text>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">* –°—Ç–æ–∏–º–æ—Å—Ç—å –ï–ò</Text>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">–°—Ç–∞–≤–∫–∞ –ù–î–°</Text>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">–°—É–º–º–∞ –±–µ–∑ –ù–î–°</Text>
                                    </Layout>
                                    <Layout flex={1}>
                                        <Text className="label" align="center">–°—É–º–º–∞ —Å –ù–î–°</Text>
                                    </Layout>
                                </Layout>
                                <EtapRow etapId={tab.opr_usl_stage_num} />
                                <EtapFooter etapId={tab.opr_usl_stage_num} />
                            </Layout>
                        </Layout>
                    </Layout>
                </>
            ) : null}
        </>
    );
};

export default Etaps;
